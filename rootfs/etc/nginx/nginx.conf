user root;
worker_processes 1;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    keepalive_timeout 65;

    upstream endurain_backend {
        server 127.0.0.1:8081;
    }

    server {
        listen 8080;
        server_name _;

        # Log the ingress path for debugging
        access_log /var/log/nginx/ingress.log main;

        # Handle root requests
        location / {
            # Get ingress path from header
            set $ingress_path "";
            if ($http_x_ingress_path) {
                set $ingress_path $http_x_ingress_path;
            }

            # Remove ingress path from the beginning of the URI for backend
            set $backend_uri $uri;
            if ($ingress_path != "") {
                set $backend_uri $uri;
                # If URI starts with ingress path, remove it
                if ($uri ~ "^$ingress_path(.*)$") {
                    set $backend_uri $1;
                }
                # If backend_uri is empty, set to root
                if ($backend_uri = "") {
                    set $backend_uri "/";
                }
            }

            # Proxy to Endurain backend
            proxy_pass http://endurain_backend$backend_uri;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Ingress-Path $ingress_path;
            proxy_cache_bypass $http_upgrade;

            # Handle CORS
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "*" always;

            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "*" always;
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
        }
    }
}
