#!/usr/bin/with-contenv bashio
# ==============================================================================
# Home Assistant Community Add-on: Endurain
# Runs the Endurain FastAPI application
# ==============================================================================

# CRITICAL TEST: This should appear in logs if s6 recognizes the service
echo "=== ENDURAIN SERVICE STARTING ===" >&2
echo "This message should appear if s6 recognizes the service" >&2

# Also try bashio logging
bashio::log.info "=== ENDURAIN SERVICE STARTING ==="
bashio::log.info "This message should appear if s6 recognizes the service"

# Basic test - just make sure the service is recognized
sleep 2
bashio::log.info "Service recognition test passed!"

# Get configuration values
DEBUG=$(bashio::config 'debug')
LOG_LEVEL=$(bashio::config 'log_level')
WORKERS=$(bashio::config 'workers')
BIND_HOST=$(bashio::config 'bind_host')
BIND_PORT=$(bashio::config 'bind_port')

bashio::log.info "Configuration loaded:"
bashio::log.info "- Host: ${BIND_HOST}"
bashio::log.info "- Port: ${BIND_PORT}"
bashio::log.info "- Log Level: ${LOG_LEVEL}"

# Check basic paths
bashio::log.info "Checking basic paths..."
bashio::log.info "Current working directory: $(pwd)"
bashio::log.info "Current user: $(whoami)"

# Check if backend directory exists
if [[ -d /app/backend ]]; then
    bashio::log.info "Backend directory exists"
    bashio::log.info "Backend contents:"
    ls -la /app/backend/ | head -10
else
    bashio::log.error "Backend directory missing!"
    bashio::log.info "App directory contents:"
    ls -la /app/ || bashio::log.error "App directory doesn't exist"
fi

# Check virtual environment
if [[ -f /opt/venv/bin/python ]]; then
    bashio::log.info "Virtual environment found"
    /opt/venv/bin/python --version
else
    bashio::log.error "Virtual environment missing!"
    ls -la /opt/ || bashio::log.error "Opt directory doesn't exist"
fi

# Start the actual Endurain application
bashio::log.info "Starting Endurain FastAPI application..."

# Set environment variables for the application from Home Assistant config
# Database configuration
export DB_HOST=$(bashio::config 'postgres_host')
export DB_PORT=$(bashio::config 'postgres_port')
export DB_USER=$(bashio::config 'postgres_user')
export DB_PASSWORD=$(bashio::config 'postgres_password')
export DB_NAME=$(bashio::config 'postgres_db')
export DB_SCHEMA=$(bashio::config 'postgres_schema')

# Application configuration
export SECRET_KEY=$(bashio::config 'secret_key')
export FERNET_KEY=$(bashio::config 'fernet_key')
export ENDURAIN_HOST=$(bashio::config 'endurain_host')
export APP_TITLE=$(bashio::config 'app_title')
export APP_DESCRIPTION=$(bashio::config 'app_description')
export APP_VERSION=$(bashio::config 'app_version')

# Optional environment variables with defaults
export ENDURAIN_UID=8080
export ENDURAIN_GID=8080
export TZ=$(bashio::config 'timezone')
export DB_TYPE=postgres
export REVERSE_GEO_PROVIDER=$(bashio::config 'reverse_geo_provider')
export PHOTON_API_HOST=$(bashio::config 'photon_api_host')
export PHOTON_API_USE_HTTPS=$(bashio::config 'photon_api_use_https')
export NOMINATIM_API_HOST=$(bashio::config 'nominatim_api_host')
export NOMINATIM_API_USE_HTTPS=$(bashio::config 'nominatim_api_use_https')
export GEOCODES_MAPS_API=$(bashio::config 'geocodes_maps_api')
export REVERSE_GEO_RATE_LIMIT=$(bashio::config 'reverse_geo_rate_limit')
export ALGORITHM=HS256
export ACCESS_TOKEN_EXPIRE_MINUTES=$(bashio::config 'access_token_expire_minutes')
export REFRESH_TOKEN_EXPIRE_DAYS=$(bashio::config 'refresh_token_expire_days')
export JAEGER_ENABLED=$(bashio::config 'jaeger_enabled')
export JAEGER_PROTOCOL=$(bashio::config 'jaeger_protocol')
export JAEGER_HOST=$(bashio::config 'jaeger_host')
export JAEGER_PORT=$(bashio::config 'jaeger_port')
export ENVIRONMENT=$(bashio::config 'environment')
export SMTP_HOST=$(bashio::config 'smtp_host')
export SMTP_PORT=$(bashio::config 'smtp_port')
export SMTP_USERNAME=$(bashio::config 'smtp_username')
export SMTP_PASSWORD=$(bashio::config 'smtp_password')
export SMTP_SECURE=$(bashio::config 'smtp_secure')
export SMTP_SECURE_TYPE=$(bashio::config 'smtp_secure_type')

# CORS configuration
export CORS_ORIGINS=$(bashio::config 'cors_origins')
export CORS_METHODS=$(bashio::config 'cors_methods')
export CORS_HEADERS=$(bashio::config 'cors_headers')

# Server configuration
export BEHIND_PROXY=$(bashio::config 'behind_proxy')
export WORKERS=$(bashio::config 'workers')
export UPLOAD_FOLDER=$(bashio::config 'upload_folder')
export MAX_CONTENT_LENGTH=$(bashio::config 'max_content_length')

# Logging
export LOG_LEVEL=$(bashio::config 'log_level')
export DEBUG=$(bashio::config 'debug')

bashio::log.info "Environment variables set from Home Assistant config"

# Check if main.py exists
if [[ ! -f /app/backend/main.py ]]; then
    bashio::log.error "main.py not found in /app/backend/"
    bashio::log.info "Available Python files:"
    find /app/backend -name "*.py" | head -10
    bashio::exit.nok "FastAPI main.py missing!"
fi

# Set ingress environment variables for the application
if bashio::var.has_value "$(bashio::addon.ingress_entry)"; then
    export INGRESS_PATH=$(bashio::addon.ingress_entry)
    bashio::log.info "Ingress enabled. Entry point: ${INGRESS_PATH}"
    
    # Copy our ingress middleware to the backend directory
    cp /app/ingress_middleware.py /app/backend/
    
    # Create a modified main.py that includes our ingress middleware
    if [[ ! -f /app/backend/main_original.py ]]; then
        cp /app/backend/main.py /app/backend/main_original.py
        bashio::log.info "Backed up original main.py"
    fi
    
    # Inject ingress middleware into main.py
    cat > /app/backend/main_with_ingress.py << 'EOF'
# Import the original main module
import sys
import os
sys.path.append('/app/backend')

# Import original app
from main_original import app

# Import our ingress middleware
from ingress_middleware import setup_ingress_middleware

# Setup ingress middleware
app = setup_ingress_middleware(app)

# Make the app available for uvicorn
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8080)
EOF
    
    # Use the modified main file
    MAIN_MODULE="main_with_ingress:app"
    bashio::log.info "Using ingress-enabled main module"
else
    bashio::log.info "No ingress detected, using standard configuration"
    MAIN_MODULE="main:app"
fi

# Start uvicorn
cd /app/backend
bashio::log.info "Starting uvicorn from /app/backend with module: ${MAIN_MODULE}"
exec /opt/venv/bin/python -m uvicorn "${MAIN_MODULE}" \
    --host "${BIND_HOST}" \
    --port "${BIND_PORT}" \
    --log-level "${LOG_LEVEL,,}" \
    --proxy-headers \
    --forwarded-allow-ips "*"
